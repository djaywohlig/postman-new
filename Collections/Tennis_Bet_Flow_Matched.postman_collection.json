{
	"info": {
		"_postman_id": "ba941488-bfa8-477f-b789-2c8b365f195b",
		"name": "Tennis_Bet_Flow_Matched",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "23753458",
		"_collection_link": "https://wohlig-super-team.postman.co/workspace/Testing~7e8d1806-84e5-4967-87dd-eb23aeb0c66a/collection/22939286-ba941488-bfa8-477f-b789-2c8b365f195b?action=share&creator=23753458&source=collection_link"
	},
	"item": [
		{
			"name": "Player Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the Access Token from the response\r",
							"let accessToken = pm.response.json().data.accessToken;\r",
							"\r",
							"// Set the Access Token environment variable\r",
							"pm.environment.set(\"playerToken\", accessToken);\r",
							"\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test(\"Response code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 5s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Test to check the format of the username field\r",
							"pm.test(\"Username format is valid\", function () {\r",
							"\r",
							"   // Define a regular expression to match the username format\r",
							"   const usernameRegex = /^[a-zA-Z]{8,20}$/;\r",
							"\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"accessToken\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"sportsbook\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"casino\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"cardgame\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"premiumsportsbook\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"lineSession\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data.accessToken).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.sportsbook).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.casino).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.cardgame).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.liveGame).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data.premiumsportsbook).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data.lineSession).not.to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{playerName}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"siteOrigin\": \"{{siteOrigin}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/member/playerLogin"
			},
			"response": []
		},
		{
			"name": "Player Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the User Name from the response\r",
							"let userName = pm.response.json().data.username;\r",
							"console.log(\"User Name: \" + userName);\r",
							"\r",
							"// Set the User Name environment variable\r",
							"pm.environment.set(\"userName\", userName);\r",
							"\r",
							"// Get the User Id from the response\r",
							"let userId = pm.response.json().data._id;\r",
							"console.log(\"User ID: \" + userId);\r",
							"\r",
							"// Set the User Id environment variable\r",
							"pm.environment.set(\"userId\", userId);\r",
							"\r",
							"\r",
							"// Get User Name env variable\r",
							"let uName = pm.environment.get(\"userName\");\r",
							"\r",
							"// Get User Id env variable\r",
							"let uId = pm.environment.get(\"userId\");\r",
							"\r",
							"\r",
							"//Verifying the username\r",
							"pm.test(\"User name is: \" + uName, () => {\r",
							"    pm.expect(userName).to.eql(uName);\r",
							"});\r",
							"\r",
							"//Verifying the user id\r",
							"pm.test(\"User id is: \" + uId, () => {\r",
							"    pm.expect(userId).to.eql(uId);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test(\"Response code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check the format of the username field\r",
							"pm.test(\"Username format is valid\", function () {\r",
							"   const username = pm.response.json().data.username;\r",
							"\r",
							"   // Define a regular expression to match the username format\r",
							"   const usernameRegex = /^[a-zA-Z0-9]{8,20}$/;\r",
							"\r",
							"   pm.expect(username).to.match(usernameRegex);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"_id\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"fancyCommission\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"bookmakerCommission\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"casino\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"cardgame\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"premiumsportsbook\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"sportsbook\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"accessLevel\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"globalLock\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"accessToken\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"horseRacing\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"matchOdds\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"customSession\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"bookmaker\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"tiedMatch\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"completedMatch\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"lineSession\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"currencyType\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"username\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"logInStatus\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"UOFMarket\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"liveGame\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data.accessToken).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data._id).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.fancyCommission).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.bookmakerCommission).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.accessLevel).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.username).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.logInStatus).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.currencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.matchOdds).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.sportsbook).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.casino).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.cardgame).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.liveGame).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data.premiumsportsbook).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.globalLock).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data.UOFMarket).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.completedMatch).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data.horseRacing).not.to.be.false; \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/member/getOneForUI"
			},
			"response": []
		},
		{
			"name": "Player Credit Details Before Bet Place",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the Available Balance of user from the response\r",
							"let balance = pm.response.json().data.balance;\r",
							"console.log(\"Available balance of user before bet is: \" + balance);\r",
							"\r",
							"// Set the Available Balance environment variable\r",
							"pm.environment.set(\"balance\", balance);\r",
							"\r",
							"// Get the Currency Type of user from the response\r",
							"let userCurrency = pm.response.json().data.currencyType;\r",
							"console.log(\"User currency type: \" + userCurrency);\r",
							"\r",
							"// Set the Currency Type environment variable\r",
							"pm.environment.set(\"userCurrency\", userCurrency);\r",
							"\r",
							"\r",
							"// Get Available Balance variable\r",
							"let uCurrency = pm.environment.get(\"userCurrency\");\r",
							"\r",
							"// Get Available Balance env variable\r",
							"let bal = pm.environment.get(\"balance\");\r",
							"\r",
							"\r",
							"//Verifying the currency\r",
							"pm.test(\"Currency is: \" + uCurrency, () => {\r",
							"    pm.expect(userCurrency).to.eql(uCurrency);\r",
							"});\r",
							"\r",
							"//Verifying the current balance before bet place\r",
							"pm.test(\"Available balance before bet place is: \" + bal, () => {\r",
							"    pm.expect(balance).to.eql(bal);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test(\"Response code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balance\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balanceOrg\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"creditLimit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"winnings\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"currencyType\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"sportBookNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balanceUp\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"betbyCurrencyType\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"netExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"wacFinalNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"cardGameNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"betbyExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"uofFinalNetExposure\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains member data\", () => {\r",
							"    pm.expect(pm.response.json().data.balance).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.balanceOrg).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.creditLimit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.winnings).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.currencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.sportBookNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.balanceUp).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.betbyCurrencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.netExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.wacFinalNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.cardGameNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.betbyExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.uofFinalNetExposure).not.to.be.NaN;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"url": "{{creditURL}}/api/sportsbook/getCurrentBalanceForSportsBook"
			},
			"response": []
		},
		{
			"name": "Get MarketId Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get Event Id\r",
							"let eventId = pm.response.json().data[0].eventId;\r",
							"console.log(\"Event ID: \" + eventId);\r",
							"\r",
							"// Set the Event Id environment variable\r",
							"pm.environment.set(\"eventId\", eventId);\r",
							"\r",
							"// Get Event Name details\r",
							"let eventName = pm.response.json().data[0].eventName;\r",
							"console.log(\"Event Name: \" + eventName);\r",
							"\r",
							"// Set the Event Name environment variable\r",
							"pm.environment.set(\"eventName\", eventName);\r",
							"\r",
							"// Get Selection Name1 details\r",
							"let selectionName1 = pm.response.json().data[0].runners[0].name;\r",
							"console.log(\"Selection Name1: \" + selectionName1);\r",
							"\r",
							"// Set the Selection Name1 environment variable\r",
							"pm.environment.set(\"selectionName1\", selectionName1);\r",
							"\r",
							"// Get Selection Name2 details\r",
							"let selectionName2 = pm.response.json().data[0].runners[1].name;\r",
							"console.log(\"Selection Name2: \" + selectionName2);\r",
							"\r",
							"// Set the Selection Name2 environment variable\r",
							"pm.environment.set(\"selectionName2\", selectionName2);\r",
							"\r",
							"// Get Market Id details\r",
							"let marketId = pm.response.json().data[0].betfairId;\r",
							"console.log(\"Market ID: \" + marketId);\r",
							"\r",
							"// Set the Market Id environment variable\r",
							"pm.environment.set(\"marketId\", marketId);\r",
							"\r",
							"// Get Selection Id1 details\r",
							"let selectionId1 = pm.response.json().data[0].runners[0].id;\r",
							"console.log(\"Selection ID1: \" + selectionId1);\r",
							"\r",
							"// Set the Selection Id1 environment variable\r",
							"pm.environment.set(\"selectionId1\", selectionId1);\r",
							"\r",
							"// Get Selection Id2 details\r",
							"let selectionId2 = pm.response.json().data[0].runners[1].id;\r",
							"console.log(\"Selection ID2: \" + selectionId2);\r",
							"\r",
							"// Set the Selection Id2 environment variable\r",
							"pm.environment.set(\"selectionId2\", selectionId2);\r",
							"\r",
							"// Get Market Name detail\r",
							"let marketName = pm.response.json().data[0].name;\r",
							"console.log(\"Market Name: \" + marketName);\r",
							"\r",
							"// Set the Market Name environment variable\r",
							"pm.environment.set(\"marketName\", marketName);\r",
							"\r",
							"// Get Back Odd of first horse\r",
							"let backOdd1 = pm.response.json().data[0].runners[0].batb[0][1];\r",
							"console.log(\"Back Odd of first horse: \" + backOdd1);\r",
							"\r",
							"// Set the backOdd1 environment variable\r",
							"pm.environment.set(\"backOdd1\", backOdd1);\r",
							"\r",
							"// Get Lay Odd of first horse\r",
							"let layOdd1 = pm.response.json().data[0].runners[0].batl[0][1];\r",
							"console.log(\"Lay Odd of first horse: \" + layOdd1);\r",
							"\r",
							"// Set the layOdd1 environment variable\r",
							"pm.environment.set(\"layOdd1\", layOdd1);\r",
							"\r",
							"// Get Back Odd of second horse\r",
							"let backOdd2 = pm.response.json().data[0].runners[1].batb[0][1];\r",
							"console.log(\"Back Odd of second horse: \" + backOdd2);\r",
							"\r",
							"// Set the backOdd2 environment variable\r",
							"pm.environment.set(\"backOdd2\", backOdd2);\r",
							"\r",
							"// Get Lay Odd of second horse\r",
							"let layOdd2 = pm.response.json().data[0].runners[1].batl[0][1];\r",
							"console.log(\"Lay Odd of second horse: \" + layOdd2);\r",
							"\r",
							"// Set the layOdd2 environment variable\r",
							"pm.environment.set(\"layOdd2\", layOdd2);\r",
							"\r",
							"// Get betb1 data\r",
							"let betb1 = JSON.stringify(\r",
							"                    [\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batb[0][0],\r",
							"                            pm.response.json().data[0].runners[0].batb[0][1],\r",
							"                            pm.response.json().data[0].runners[0].batb[0][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batb[1][0],\r",
							"                            pm.response.json().data[0].runners[0].batb[1][1],\r",
							"                            pm.response.json().data[0].runners[0].batb[1][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batb[2][0],\r",
							"                            pm.response.json().data[0].runners[0].batb[2][1],\r",
							"                            pm.response.json().data[0].runners[0].batb[2][2]\r",
							"                        ]\r",
							"                    ]\r",
							");\r",
							"// console.log(betb1);\r",
							"\r",
							"// set the betb1 environment variable\r",
							"pm.environment.set(\"betb1\", betb1);\r",
							"\r",
							"// Get betl1 data\r",
							"let betl1 = JSON.stringify(\r",
							"                    [\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batl[0][0],\r",
							"                            pm.response.json().data[0].runners[0].batl[0][1],\r",
							"                            pm.response.json().data[0].runners[0].batl[0][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batl[1][0],\r",
							"                            pm.response.json().data[0].runners[0].batl[1][1],\r",
							"                            pm.response.json().data[0].runners[0].batl[1][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[0].batl[2][0],\r",
							"                            pm.response.json().data[0].runners[0].batl[2][1],\r",
							"                            pm.response.json().data[0].runners[0].batl[2][2]\r",
							"                        ]\r",
							"                    ]\r",
							");\r",
							"// console.log(betl1);\r",
							"\r",
							"// set the betl1 environment variable\r",
							"pm.environment.set(\"betl1\", betl1);\r",
							"\r",
							"// Get betb2 data\r",
							"let betb2 = JSON.stringify(\r",
							"                    [\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batb[0][0],\r",
							"                            pm.response.json().data[0].runners[1].batb[0][1],\r",
							"                            pm.response.json().data[0].runners[1].batb[0][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batb[1][0],\r",
							"                            pm.response.json().data[0].runners[1].batb[1][1],\r",
							"                            pm.response.json().data[0].runners[1].batb[1][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batb[2][0],\r",
							"                            pm.response.json().data[0].runners[1].batb[2][1],\r",
							"                            pm.response.json().data[0].runners[1].batb[2][2]\r",
							"                        ]\r",
							"                    ]\r",
							");\r",
							"// console.log(betb2);\r",
							"\r",
							"// set the betb2 environment variable\r",
							"pm.environment.set(\"betb2\", betb2);\r",
							"\r",
							"// Get betl2 data\r",
							"let betl2 = JSON.stringify(\r",
							"                    [\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batl[0][0],\r",
							"                            pm.response.json().data[0].runners[1].batl[0][1],\r",
							"                            pm.response.json().data[0].runners[1].batl[0][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batl[1][0],\r",
							"                            pm.response.json().data[0].runners[1].batl[1][1],\r",
							"                            pm.response.json().data[0].runners[1].batl[1][2]\r",
							"                        ],\r",
							"                        [\r",
							"                            pm.response.json().data[0].runners[1].batl[2][0],\r",
							"                            pm.response.json().data[0].runners[1].batl[2][1],\r",
							"                            pm.response.json().data[0].runners[1].batl[2][2]\r",
							"                        ]\r",
							"                    ]\r",
							");\r",
							"// console.log(betl2);\r",
							"\r",
							"// set the betl2 environment variable\r",
							"pm.environment.set(\"betl2\", betl2);\r",
							"\r",
							"\r",
							"// Get Selection Id1 env variable\r",
							"let sId1 = pm.environment.get(\"selectionId1\");\r",
							"\r",
							"// Get Selection Id2 env variable\r",
							"let sId2 = pm.environment.get(\"selectionId2\");\r",
							"\r",
							"// Get Selection Name1 env variable\r",
							"let sName1 = pm.environment.get(\"selectionName1\");\r",
							"\r",
							"// Get Selection Name2 env variable\r",
							"let sName2 = pm.environment.get(\"selectionName2\");\r",
							"\r",
							"// Get Market Id env variable\r",
							"let mId = pm.environment.get(\"marketId\");\r",
							"\r",
							"// Get Event Id env variable\r",
							"let eId = pm.environment.get(\"eventId\");\r",
							"\r",
							"// Get Event Name env variable\r",
							"let eName = pm.environment.get(\"eventName\");\r",
							"\r",
							"// Get Market Name env variable\r",
							"let mName = pm.environment.get(\"marketName\");\r",
							"\r",
							"// Get betb1 env variable\r",
							"let bb1 = pm.environment.get(\"betb1\");\r",
							"\r",
							"// Get betl1 env variable\r",
							"let bl1 = pm.environment.get(\"betl1\");\r",
							"\r",
							"// Get betb2 env variable\r",
							"let bb2 = pm.environment.get(\"betb2\");\r",
							"\r",
							"// Get betl2 env variable\r",
							"let bl2 = pm.environment.get(\"betl2\");\r",
							"\r",
							"\r",
							"// Verifying the Event Id\r",
							"pm.test(\"Event ID is: \" + eId, () => {\r",
							"    pm.expect(eventId).to.eql(eId);\r",
							"});\r",
							"\r",
							"// Verifying the Event Name\r",
							"pm.test(\"Event Name is: \" + eName, () => {\r",
							"    pm.expect(eventName).to.eql(eName);\r",
							"});\r",
							"\r",
							"// Verifying the Selection Name1\r",
							"pm.test(\"Selection Name1 is: \" + sName1, () => {\r",
							"    pm.expect(selectionName1).to.eql(sName1);\r",
							"});\r",
							"\r",
							"// Verifying the Selection Name2\r",
							"pm.test(\"Selection Name2 is: \" + sName2, () => {\r",
							"    pm.expect(selectionName2).to.eql(sName2);\r",
							"});\r",
							"\r",
							"// Verifying the Market Id\r",
							"pm.test(\"Market ID is: \" + mId, () => {\r",
							"    pm.expect(marketId).to.eql(mId);\r",
							"});\r",
							"\r",
							"// Verifying the Selection Id1\r",
							"pm.test(\"Selection ID1 is: \" + sId1, () => {\r",
							"    pm.expect(selectionId1).to.eql(sId1);\r",
							"});\r",
							"\r",
							"// Verifying the Selection Id2\r",
							"pm.test(\"Selection ID2 is: \" + sId2, () => {\r",
							"    pm.expect(selectionId2).to.eql(sId2);\r",
							"});\r",
							"\r",
							"// Verifying the Market Name\r",
							"pm.test(\"Market Name is: \" + mName, () => {\r",
							"    pm.expect(marketName).to.eql(mName);\r",
							"});\r",
							"\r",
							"\r",
							"// Get book data\r",
							"let book = JSON.stringify(\r",
							"    [\r",
							"        {\r",
							"            \"handicap\": 0,\r",
							"            \"sortPriority\": 1,\r",
							"            \"metadata\": {\r",
							"                \"runnerId\": sId1\r",
							"            },\r",
							"            \"betfairId\": sId1,\r",
							"            \"name\": selectionName1,\r",
							"            \"id\": sId1,\r",
							"            \"batb\": betb1,\r",
							"            \"batl\": betl2\r",
							"        },\r",
							"        {\r",
							"            \"handicap\": 0,\r",
							"            \"sortPriority\": 2,\r",
							"            \"metadata\": {\r",
							"                \"runnerId\": sId2\r",
							"            },\r",
							"            \"betfairId\": sId2,\r",
							"            \"name\": selectionName2,\r",
							"            \"id\": sId2,\r",
							"            \"batb\": betb2,\r",
							"            \"batl\": betl2\r",
							"        }\r",
							"    ]\r",
							");\r",
							"console.log(book);\r",
							"\r",
							"// Set the book environment variable\r",
							"pm.environment.set(\"book\", book);\r",
							"\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 5s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"_id\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"betfairStatus\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"inPlayStatus\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"isSuspended\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"isOnlyback\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"betfairOdds\");\r",
							"    pm.expect(pm.response.json().data[0].competitionId).to.have.property(\"name\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"runners\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"betfairId\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"competitionId\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"eventName\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"eventType\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"marketStartTime\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"name\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"eventId\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data[0]._id).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].betfairStatus).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].inPlayStatus).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].isSuspended).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].isOnlyback).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].betfairOdds).not.to.be.false;\r",
							"    pm.expect(pm.response.json().data[0].runners).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].betfairId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].competitionId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].eventName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].eventType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].marketStartTime).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].name).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].eventId).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"game\": \"Tennis\",\r\n    \"_accessToken\": \"{{playerToken}}\",\r\n    \"accessLevel\": \"Player\",\r\n    \"isFancy\": false,\r\n    \"upComing\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL1}}/api/Category/getMarketIds"
			},
			"response": []
		},
		{
			"name": "User Bets Before Bet Place",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the Bet Count from the response\r",
							"let betCount = pm.response.json().data.totalCount;\r",
							"console.log(\"Number of bets is: \" + betCount);\r",
							"\r",
							"// Set the number of bets environment variable\r",
							"pm.environment.set(\"betCount\", betCount);\r",
							"\r",
							"\r",
							"// Get Bet Count env variable\r",
							"let bet = pm.environment.get(\"betCount\");\r",
							"\r",
							"\r",
							"//Verifying the Bet Count before bet place\r",
							"pm.test(\"Total bet count before bet place is: \" + bet, () => {\r",
							"    pm.expect(betCount).to.eql(bet);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"totalCount\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0]).to.have.property(\"matchName\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0]).to.have.property(\"name\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0]).to.have.property(\"name\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"type\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betId\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betRate\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"stake\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"marketId\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"horse\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"event\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betfairId\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"placedDate\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"createdAt\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"eventType\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"marketName\");\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betType\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data.totalCount).not.to.be.NaN;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].matchName).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].name).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].name).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].type).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betId).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betRate).not.to.be.NaN;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].stake).not.to.be.NaN;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].marketId).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].horse).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].event).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betfairId).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].placedDate).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].createdAt).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].eventType).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].marketName).not.to.be.empty;\r",
							"    // pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betType).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_accessToken\": \"{{playerToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL1}}/api/bet/getMyCurrentBetStatusNew2"
			},
			"response": []
		},
		{
			"name": "Place Bet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Selecting stakes\r",
							"const stakeList = [1, 2, 3, 4, 5];\r",
							"const stake = stakeList[Math.floor(Math.random() * stakeList.length)];\r",
							"\r",
							"// Set the stakes environment variable\r",
							"pm.environment.set(\"stake\", stake);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get Message after bet place\r",
							"let message1 = pm.response.json().message.message;\r",
							"console.log(\"Message: \" + message1);\r",
							"\r",
							"// Set the Message environment variable\r",
							"pm.environment.set(\"message1\", message1);\r",
							"\r",
							"// Get Status after bet place\r",
							"let status1 = pm.response.json().message.status;\r",
							"console.log(\"Status: \" + status1);\r",
							"\r",
							"// Set the Status environment variable\r",
							"pm.environment.set(\"status1\", status1);\r",
							"\r",
							"\r",
							"// Get Message env variable\r",
							"let msg1 = pm.environment.get(\"message1\");\r",
							"\r",
							"// Get Status env variable\r",
							"let st1 = pm.environment.get(\"status1\");\r",
							"\r",
							"\r",
							"//Verifying the bet place Message\r",
							"pm.test(\"Message is: \" + msg1, () => {\r",
							"    pm.expect(message1).to.eql(msg1);\r",
							"});\r",
							"\r",
							"//Verifying the bet place status\r",
							"pm.test(\"Status of bet is: \" + st1, () => {\r",
							"    pm.expect(status1).to.eql(st1);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 6s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"_id\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"fancyCommission\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"bookmakerCommission\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"stake\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"type\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"placedDate\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"matchedTime\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"horse\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"betRate\");\r",
							"    pm.expect(pm.response.json().data[0].player).to.have.property(\"id\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"marketId\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"IP\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"eventType\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"userName\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"selectionName\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"marketName\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"event\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"currencyType\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"averagePriceMatched\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"betfairId\");\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"eventId\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data[0]._id).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].fancyCommission).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data[0].bookmakerCommission).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data[0].stake).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data[0].type).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].placedDate).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].matchedTime).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].horse).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].betRate).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data[0].player.id).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].marketId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].IP).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].eventType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].userName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].selectionName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].marketName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].event).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].currencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].averagePriceMatched).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data[0].status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].betfairId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data[0].eventId).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_accessToken\": \"{{playerToken}}\",\r\n    \"body\": [\r\n        {\r\n            \"betType\": \"odds\",\r\n            \"userName\": \"{{userName}}\",\r\n            \"odds\": \"{{backOdd1}}\",\r\n            \"position\": 0,\r\n            \"stake\": \"{{stake}}\",\r\n            \"type\": \"{{type1}}\",\r\n            \"event\": \"{{eventName}}\",\r\n            \"book\": \"{{JSON.parse(book);}}\",\r\n            \"marketId\": \"{{marketId}}\",\r\n            \"selectionId\": \"{{selectionId1}}\",\r\n            \"selectionName\": \"{{selectionName1}}\",\r\n            \"marketName\": \"{{marketName}}\",\r\n            \"handicap\": 0,\r\n            \"error\": false\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{sportsbookPlaceBetURL}}/api/Betfair/placePlayerBetNew"
			},
			"response": []
		},
		{
			"name": "Player Credit Details After Bet Place",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the Available Balance of user from the response\r",
							"let balance1 = pm.response.json().data.balance;\r",
							"console.log(\"Available bance of user after bet is: \" + balance1);\r",
							"\r",
							"// Set the Available Balance environment variable\r",
							"pm.environment.set(\"balance1\", balance1);\r",
							"\r",
							"// Get the Currency Type of user from the response\r",
							"let userCurrency1 = pm.response.json().data.currencyType;\r",
							"console.log(\"User currency type: \" + userCurrency1);\r",
							"\r",
							"// Set the Currency Type environment variable\r",
							"pm.environment.set(\"userCurrency1\", userCurrency1);\r",
							"\r",
							"\r",
							"// Get Available Balance env variable\r",
							"let bal1 = pm.environment.get(\"balance1\");\r",
							"\r",
							"// Get Currency Type env variable\r",
							"let uCurrency1 = pm.environment.get(\"userCurrency1\");\r",
							"\r",
							"\r",
							"//Verifying the Currency Type\r",
							"pm.test(\"Currency is: \" + uCurrency1 , () => {\r",
							"    pm.expect(userCurrency1).to.eql(uCurrency1);\r",
							"});\r",
							"\r",
							"\r",
							"//Verifying the Available Balance after bet place\r",
							"pm.test(\"Available balance after bet place is: \" + bal1, () => {\r",
							"    pm.expect(balance1).to.eql(bal1);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"   const responseBody = pm.response.json();\r",
							"\r",
							"   // Define an array of sensitive properties\r",
							"   const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"   // Loop through each sensitive property and check if it exists in the response body\r",
							"   sensitiveProperties.forEach(function (property) {\r",
							"       pm.expect(responseBody).to.not.have.property(property);\r",
							"   });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balance\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balanceOrg\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"creditLimit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"winnings\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"currencyType\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"sportBookNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"balanceUp\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"betbyCurrencyType\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"netExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"wacFinalNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"cardGameNetExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"betbyExposure\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"uofFinalNetExposure\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains member data\", () => {\r",
							"    pm.expect(pm.response.json().data.balance).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.balanceOrg).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.creditLimit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.winnings).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.currencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.sportBookNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.balanceUp).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.betbyCurrencyType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.netExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.wacFinalNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.cardGameNetExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.betbyExposure).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.uofFinalNetExposure).not.to.be.NaN;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"url": "{{creditURL}}/api/sportsbook/getCurrentBalanceForSportsBook"
			},
			"response": []
		},
		{
			"name": "User Bets After Bet Place",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the Bet Count from the response\r",
							"let betCount1 = pm.response.json().data.totalCount;\r",
							"console.log(\"Number of bets is: \" + betCount1);\r",
							"\r",
							"// Set the number of bets environment variable\r",
							"pm.environment.set(\"betCount1\", betCount1);\r",
							"\r",
							"\r",
							"// Get Bet Count env variable\r",
							"let bet1 = pm.environment.get(\"betCount1\");\r",
							"\r",
							"\r",
							"//Verifying the Bet Count before bet place\r",
							"pm.test(\"Total bet count agfter bet place is: \" + bet1, () => {\r",
							"    pm.expect(betCount1).to.eql(bet1);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Define an array of sensitive properties\r",
							"    const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"    // Loop through each sensitive property and check if it exists in the response body\r",
							"    sensitiveProperties.forEach(function (property) {\r",
							"        pm.expect(responseBody).to.not.have.property(property);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data.data[0]).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0]).to.have.property(\"matchName\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0]).to.have.property(\"name\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0]).to.have.property(\"name\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"type\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betId\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"placedDate\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betRate\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"stake\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"marketId\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"horse\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"event\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"status\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betfairId\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"createdAt\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"averagePriceMatched\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"eventType\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"parentCategory\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"marketName\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"isInvalidBet\");\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0]).to.have.property(\"betType\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains member data\", () => {\r",
							"    pm.expect(pm.response.json().data.data[0].status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].matchName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].name).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].name).not.to.be.empty;;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].type).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].placedDate).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betRate).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].stake).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].marketId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].horse).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].event).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].status).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betfairId).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].createdAt).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].averagePriceMatched).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].eventType).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].parentCategory).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].marketName).not.to.be.empty;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].isInvalidBet).not.to.be.true;\r",
							"    pm.expect(pm.response.json().data.data[0].bets[0].markets[0].runners[0].bets[0].betType).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_accessToken\": \"{{playerToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL1}}/api/bet/getMyCurrentBetStatusNew2"
			},
			"response": []
		},
		{
			"name": "Betting PNL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains any sensitive information\r",
							"pm.test(\"No sensitive information in response body\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Define an array of sensitive properties\r",
							"    const sensitiveProperties = [\"accessToken\", \"password\"];\r",
							"\r",
							"    // Loop through each sensitive property and check if it exists in the response body\r",
							"    sensitiveProperties.forEach(function (property) {\r",
							"        pm.expect(responseBody).to.not.have.property(property);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"deposit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"withdrawal\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"netProfit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"gameWiseNetProfit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"cardGameNetProfit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"liveArNetProfit\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"netCommission\");\r",
							"    pm.expect(pm.response.json().data).to.have.property(\"premiumSportsbookNetProfit\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().data.deposit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.withdrawal).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.netProfit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.gameWiseNetProfit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.cardGameNetProfit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.liveArNetProfit).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.netCommission).not.to.be.NaN;\r",
							"    pm.expect(pm.response.json().data.premiumSportsbookNetProfit).not.to.be.NaN;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fromDate\": \"2023-04-09\",\r\n    \"toDate\": \"2023-05-09\",\r\n    \"games\": {\r\n        \"_id\": \"5b36053e46123555cca93993\",\r\n        \"name\": \"SportsBook\",\r\n        \"rules\": \"SportsBook rules\"\r\n    },\r\n    \"game\": \"5b36053e46123555cca93993\",\r\n    \"subGame\": \"Tennis\",\r\n    \"subGameFilter\": \"Tennis\",\r\n    \"lastId\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/sportsbook/bettingPL"
			},
			"response": []
		},
		{
			"name": "Player Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get Logout Message from response\r",
							"let message2 = pm.response.json().message;\r",
							"// console.log(\"Message is: \" + message2);\r",
							"\r",
							"// Set the Logout Message environment variable\r",
							"pm.environment.set(\"message2\", message2);\r",
							"\r",
							"\r",
							"// Get Bet Count env variable\r",
							"let lMessage = pm.environment.get(\"message2\");\r",
							"\r",
							"\r",
							"//Verifying the Logout Message\r",
							"pm.test(\"Logout Message is: \" + lMessage, () => {\r",
							"    pm.expect(message2).to.eql(lMessage);\r",
							"});\r",
							"\r",
							"// Verify the response code is 200\r",
							"pm.test('Response code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"// Verify the response time\r",
							"pm.test(\"Response time is less than 1s\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Verify the properties\r",
							"pm.test(\"Response contains expected member data\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"// Verify data not empty\r",
							"pm.test(\"Response contains not empty member data\", () => {\r",
							"    pm.expect(pm.response.json().message).not.to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-key-id",
						"value": "Bearer {{playerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_accessToken\": \"{{playerToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/api/member/logout"
			},
			"response": []
		}
	]
}